from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CallbackQueryHandler, filters
from datetime import datetime
import os
import csv
import logging 
from telegram.constants import ParseMode # Essencial para usar formata√ß√£o como negrito e emojis

# Importa as fun√ß√µes que interagem com o Google Drive, como upload de fotos e exporta√ß√£o de dados Excel.
from exportar_para_excel import export_data_to_drive, upload_photo_to_drive 

# Importa m√≥dulos de suporte para configura√ß√µes (config), utilidades (utils) e dados globais (globals).
import config 
import utils  
from globals import user_data 

# Configura o logger para este arquivo, √∫til para acompanhar o que est√° acontecendo no Render.
logger = logging.getLogger(__name__)

# --- Defini√ß√£o dos Estados da Nossa Conversa ---
# Cada um desses nomes representa um "passo" no fluxo do bot. 
# O 'range()' nos ajuda a dar um n√∫mero √∫nico para cada estado, que √© usado pelo ConversationHandler.
# ADICIONADO: TIPO_VISITA
COLABORADOR, COLABORADOR_MANUAL, TIPO_VISITA, ORGAO_PUBLICO_KEYWORD, ORGAO_PUBLICO_PAGINACAO, ORGAO_PUBLICO_MANUAL, \
FIGURA_PUBLICA, CARGO, ASSUNTO_PALAVRA_CHAVE, ASSUNTO_PAGINACAO, ASSUNTO_MANUAL, \
MUNICIPIO, DATA, DATA_MANUAL, FOTO, DEMANDA_ESCOLHA, DEMANDA_DIGITAR, OV, PRO, \
OBSERVACAO_ESCOLHA, OBSERVACAO_DIGITAR, CONFIRMACAO_FINAL = range(22) # AJUSTADO: range(22) para incluir o novo estado


# --- In√≠cio do Nosso Registro: Sele√ß√£o do Colaborador ---
async def iniciar_colaborador(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Crio bot√µes dinamicamente com a lista de colaboradores que voc√™ definiu em 'config.py'.
    buttons = [InlineKeyboardButton(name, callback_data=f"colaborador_{name}") for name in config.COLABORADORES]
    # Adiciono a op√ß√£o para digitar manualmente, caso o nome n√£o esteja na lista.
    buttons.append(InlineKeyboardButton("Outro", callback_data="colaborador_outro"))
    # Organizo os bot√µes em um menu de 2 colunas para ficar visualmente melhor.
    keyboard = InlineKeyboardMarkup(utils.build_menu(buttons, n_cols=2))
    # Envio a primeira mensagem, pedindo para o usu√°rio escolher o colaborador.
    await update.message.reply_text(
        "üëã Ol√°! Vamos come√ßar o registro da ocorr√™ncia.\nPor favor, selecione o <b>colaborador</b> na lista ou clique em 'Outro' para digitar manualmente:", 
        reply_markup=keyboard, 
        parse_mode=ParseMode.HTML # Permite usar o negrito (<b>) na mensagem.
    )
    # Sinalizo ao bot que agora estamos no estado de "COLABORADOR", esperando a escolha.
    return COLABORADOR

# Lida com a escolha do colaborador via bot√£o ou a op√ß√£o "Outro".
async def colaborador_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query # Pego a informa√ß√£o do bot√£o que foi clicado.
    await query.answer() # Importante: indica ao Telegram que a intera√ß√£o foi recebida.
    data = query.data # O texto que estava no 'callback_data' do bot√£o.

    if data == "colaborador_outro":
        # Se o usu√°rio optou por digitar o nome.
        await query.message.reply_text("‚úçÔ∏è Entendido! Por favor, digite o <b>nome completo do colaborador</b>:")
        return COLABORADOR_MANUAL # Passamos para o estado onde esperamos o texto digitado.
    else:
        # Se o usu√°rio escolheu um colaborador da lista.
        colaborador = data.replace("colaborador_", "") # Removo o prefixo para ter s√≥ o nome.
        context.user_data['colaborador'] = colaborador # Salvo o nome no contexto da conversa.
        await query.message.edit_text(f"‚úÖ Colaborador selecionado: <b>{colaborador}</b>.", parse_mode=ParseMode.HTML) # Edito a mensagem anterior para confirmar.
        # NOVO: Transi√ß√£o para o estado de TIPO_VISITA
        return await solicitar_tipo_visita(update, context) # Pergunto sobre o tipo de visita.

# Lida com a entrada manual do nome do colaborador.
async def colaborador_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nome = update.message.text.strip() # Pego o texto digitado.
    context.user_data['colaborador'] = nome # Salvo o nome.
    await update.message.reply_text(f"‚úÖ Colaborador registrado: <b>{nome}</b>.", parse_mode=ParseMode.HTML)
    # NOVO: Transi√ß√£o para o estado de TIPO_VISITA
    return await solicitar_tipo_visita(update, context) # Pergunto sobre o tipo de visita.


# --- NOVO: Etapa: Tipo de Visita ---
async def solicitar_tipo_visita(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        InlineKeyboardButton("üîÑ Reativa", callback_data="tipo_visita_reativa"),
        InlineKeyboardButton(" proactive Proativa", callback_data="tipo_visita_proativa"),
    ]
    keyboard = InlineKeyboardMarkup.from_row(buttons)

    # Verifica se a chamada veio de uma mensagem ou de um bot√£o para responder corretamente.
    if update.message:
        await update.message.reply_text("ü§ù Excelente! Agora, por favor, selecione o <b>tipo da visita</b> realizada:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    elif update.callback_query:
        await update.callback_query.message.reply_text("ü§ù Excelente! Agora, por favor, selecione o <b>tipo da visita</b> realizada:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

    return TIPO_VISITA # Move para o novo estado

async def tipo_visita_escolha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    tipo_visita = data.replace("tipo_visita_", "") # Remove o prefixo para obter o tipo.
    context.user_data['tipo_visita'] = tipo_visita.capitalize() # Salva o tipo (capitalizado).

    await query.message.edit_text(f"‚úÖ Tipo de visita selecionado: <b>{tipo_visita.capitalize()}</b>.", parse_mode=ParseMode.HTML)
    await query.message.reply_text("üè† Perfeito! Agora, digite uma <b>palavra-chave</b> para buscar o <b>√≥rg√£o p√∫blico</b> (ex: 'prefeitura' ou 'sa√∫de'):", parse_mode=ParseMode.HTML)
    return ORGAO_PUBLICO_KEYWORD # Continua o fluxo para o pr√≥ximo passo.

# --- FIM NOVO: Etapa: Tipo de Visita ---


# --- Etapa: √ìrg√£o P√∫blico ---
# Inicia a busca por √≥rg√£o p√∫blico com uma palavra-chave.
async def buscar_orgao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyword = update.message.text.lower() # Pego a palavra-chave e padronizo para min√∫sculas.
    orgaos = utils.ler_orgaos_csv() # Leio a lista de √≥rg√£os do seu CSV atrav√©s de 'utils.py'.
    resultados = [o for o in orgaos if keyword in o.lower()] # Filtro os resultados.
    context.user_data['orgaos_busca'] = resultados # Guardo os resultados para a pagina√ß√£o.
    context.user_data['orgao_pagina'] = 0 # Come√ßo na primeira p√°gina.

    if not resultados:
        # Se n√£o encontramos nada.
        await update.message.reply_text("‚ùó N√£o encontramos nenhum √≥rg√£o com essa palavra-chave. Por favor, digite <b>manualmente o nome completo do √≥rg√£o p√∫blico</b>:", parse_mode=ParseMode.HTML)
        return ORGAO_PUBLICO_MANUAL # Pedimos para o usu√°rio digitar.

    # Se encontramos resultados, mostramos os bot√µes de pagina√ß√£o.
    buttons, pagina_atual = utils.botoes_pagina(resultados, 0, prefix="orgao_")
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(
        f"üîé Encontrei <b>{len(resultados)} resultados</b> para '<i>{keyword}</i>'. Selecione abaixo ou navegue nas op√ß√µes:", 
        reply_markup=keyboard, 
        parse_mode=ParseMode.HTML
    )
    return ORGAO_PUBLICO_PAGINACAO # Passamos para o estado de pagina√ß√£o.

# Lida com a navega√ß√£o na lista de √≥rg√£os p√∫blicos e a sele√ß√£o.
async def orgao_paginacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    pagina_atual = context.user_data.get("orgao_pagina", 0)
    resultados = context.user_data.get("orgaos_busca", [])

    if data == "orgao_proximo":
        # Avan√ßa para a pr√≥xima p√°gina de resultados.
        pagina_atual += 1
        context.user_data["orgao_pagina"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="orgao_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes)) # Atualizo os bot√µes na mesma mensagem.
        return ORGAO_PUBLICO_PAGINACAO # Continuamos na pagina√ß√£o.

    elif data == "orgao_voltar":
        # Volta para a p√°gina anterior.
        pagina_atual = max(0, pagina_atual - 1) # Evita p√°ginas negativas.
        context.user_data["orgao_pagina"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="orgao_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes))
        return ORGAO_PUBLICO_PAGINACAO 

    elif data == "orgao_inserir_manual":
        # Op√ß√£o para digitar o √≥rg√£o manualmente.
        await query.message.reply_text("‚úçÔ∏è Certo. Por favor, digite <b>manualmente o nome completo do √≥rg√£o p√∫blico</b>:", parse_mode=ParseMode.HTML)
        return ORGAO_PUBLICO_MANUAL # Passamos para o estado de digita√ß√£o manual.

    elif data == "orgao_refazer_busca":
        # Op√ß√£o para uma nova busca.
        await query.message.reply_text("üîÑ Ok, vamos refazer a busca. Digite uma nova <b>palavra-chave</b> para o √≥rg√£o p√∫blico:", parse_mode=ParseMode.HTML)
        return ORGAO_PUBLICO_KEYWORD # Voltamos para a busca por palavra-chave.
    
    else:
        # Quando um √≥rg√£o √© selecionado da lista.
        orgao_selecionado = data.replace("orgao_", "")
        context.user_data["orgao_publico"] = orgao_selecionado # Salvo o √≥rg√£o.
        await query.message.edit_text(f"‚úÖ √ìrg√£o selecionado: <b>{orgao_selecionado}</b>.", parse_mode=ParseMode.HTML)
        await query.message.reply_text("üßë‚Äçüíº Excelente! Agora, digite o <b>nome completo da figura p√∫blica</b> (a pessoa de contato) relacionada a este √≥rg√£o:", parse_mode=ParseMode.HTML)
        return FIGURA_PUBLICA # Seguimos para a figura p√∫blica.
    
# Lida com a entrada manual do nome do √≥rg√£o p√∫blico.
async def orgao_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nome = update.message.text.strip()
    context.user_data['orgao_publico'] = nome
    utils.salvar_orgao(nome)  # Salvo o novo √≥rg√£o no seu CSV de √≥rg√£os (via 'utils.py').
    await update.message.reply_text(f"‚úÖ √ìrg√£o p√∫blico registrado manualmente: <b>{nome}</b>.", parse_mode=ParseMode.HTML)
    await update.message.reply_text("üßë‚Äçüíº Excelente! Agora, digite o <b>nome completo da figura p√∫blica</b> (a pessoa de contato) relacionada a este √≥rg√£o:", parse_mode=ParseMode.HTML)
    return FIGURA_PUBLICA 


# --- Etapa: Figura P√∫blica ---
async def figura_publica_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    figura_publica = update.message.text.strip()
    context.user_data['figura_publica'] = figura_publica
    await update.message.reply_text(f"‚úÖ Figura p√∫blica registrada: <b>{figura_publica}</b>.", parse_mode=ParseMode.HTML)
    await update.message.reply_text("üíº E qual √© o <b>Cargo</b> dessa figura p√∫blica?", parse_mode=ParseMode.HTML)
    return CARGO 


# --- Etapa: Cargo ---
async def cargo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cargo = update.message.text.strip()
    context.user_data['cargo'] = cargo
    await update.message.reply_text(f"‚úÖ Cargo registrado: <b>{cargo}</b>.", parse_mode=ParseMode.HTML)
    await update.message.reply_text("‚úâÔ∏è Por favor, digite uma <b>palavra-chave</b> para buscar o <b>assunto</b> da ocorr√™ncia:", parse_mode=ParseMode.HTML)
    return ASSUNTO_PALAVRA_CHAVE 


# --- Etapa: Assunto ---
# Inicia a busca por assunto com uma palavra-chave.
async def buscar_assunto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    palavra_chave = update.message.text.lower()
    assuntos = utils.ler_assuntos_csv() # Leio a lista de assuntos do seu CSV.
    resultados = [a for a in assuntos if palavra_chave in a.lower()]
    context.user_data['assuntos_busca'] = resultados
    context.user_data['assunto_pagina'] = 0

    if not resultados:
        # Se nenhum assunto for encontrado.
        await update.message.reply_text("‚ùó Nenhum assunto encontrado com essa palavra-chave. Por favor, digite <b>manualmente o assunto completo</b>:", parse_mode=ParseMode.HTML)
        return ASSUNTO_MANUAL
    
    buttons, pagina_atual = utils.botoes_pagina(resultados, 0, prefix="assunto_")
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(f"üîé Encontrei <b>{len(resultados)} resultados</b> para '<i>{palavra_chave}</i>'. Selecione abaixo ou navegue nas op√ß√µes:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    return ASSUNTO_PAGINACAO

# Lida com a navega√ß√£o na lista de assuntos e a sele√ß√£o.
async def assunto_paginacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    pagina_atual = context.user_data.get("assunto_pagina", 0)
    resultados = context.user_data.get("assuntos_busca", [])

    if data == "assunto_proximo":
        pagina_atual += 1
        context.user_data["assunto_pagina"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="assunto_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes))
        return ASSUNTO_PAGINACAO

    elif data == "assunto_voltar":
        pagina_atual = max(0, pagina_atual - 1)
        context.user_data["assunto_pagina"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="assunto_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes))
        return ASSUNTO_PAGINACAO

    elif data == "assunto_inserir_manual":
        await query.message.reply_text("‚úçÔ∏è Certo. Por favor, digite <b>manualmente o assunto completo</b>:", parse_mode=ParseMode.HTML)
        return ASSUNTO_MANUAL

    elif data == "assunto_refazer_busca":
        await query.message.reply_text("üîÑ Ok, vamos refazer a busca. Digite uma nova <b>palavra-chave</b> para o assunto:", parse_mode=ParseMode.HTML)
        return ASSUNTO_PALAVRA_CHAVE

    else:
        assunto_selecionado = data.replace("assunto_", "")
        context.user_data["assunto"] = assunto_selecionado
        await query.message.edit_text(f"‚úÖ Assunto selecionado: <b>{assunto_selecionado}</b>.", parse_mode=ParseMode.HTML)
        await query.message.reply_text("üèôÔ∏è Quase l√°! Em qual <b>munic√≠pio</b> a ocorr√™ncia aconteceu?", parse_mode=ParseMode.HTML)
        return MUNICIPIO

# Lida com o assunto digitado manualmente.
async def assunto_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assunto = update.message.text.strip()
    context.user_data['assunto'] = assunto
    utils.salvar_assunto(assunto) 
    await update.message.reply_text(f"‚úÖ Assunto registrado: <b>{assunto}</b>.", parse_mode=ParseMode.HTML)
    await update.message.reply_text("üèôÔ∏è Quase l√°! Em qual <b>munic√≠pio</b> a ocorr√™ncia aconteceu?", parse_mode=ParseMode.HTML)
    return MUNICIPIO


# --- Etapa: Munic√≠pio ---
async def municipio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['municipio'] = update.message.text.strip()
    await update.message.reply_text(f"‚úÖ Munic√≠pio registrado: <b>{context.user_data['municipio']}</b>.", parse_mode=ParseMode.HTML)
    return await solicitar_data(update, context) # Chama a fun√ß√£o que pede a data.


# --- Etapa: Data da Ocorr√™ncia ---
# Pergunta ao usu√°rio como ele quer informar a data (atual ou manual).
async def solicitar_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        InlineKeyboardButton("üìÖ Usar data/hora atual", callback_data="data_hoje"),
        InlineKeyboardButton("‚úèÔ∏è Digitar data manualmente", callback_data="data_manual"),
    ]
    keyboard = InlineKeyboardMarkup.from_row(buttons)

    # Verifica se a chamada veio de uma mensagem ou de um bot√£o para responder corretamente.
    if update.message: 
        await update.message.reply_text("üóìÔ∏è Por favor, selecione uma op√ß√£o para a <b>data da ocorr√™ncia</b>:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    elif update.callback_query: 
        await update.callback_query.message.reply_text("üóìÔ∏è Por favor, selecione uma op√ß√£o para a <b>data da ocorr√™ncia</b>:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

    return DATA 

# Lida com a entrada da data (escolha de bot√£o ou digita√ß√£o manual).
async def data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query: # Se a entrada veio de um clique de bot√£o.
        query = update.callback_query
        await query.answer()

        if query.data == "data_hoje":
            dt = datetime.now()
            context.user_data['data'] = dt.strftime("%Y-%m-%d") # Salva a data formatada.
            await query.message.edit_text(f"‚úÖ Data registrada: <b>{dt.strftime('%Y/%m/%d %H:%M')}</b>.", parse_mode=ParseMode.HTML) # Confirma com data e hora.
            await query.message.reply_text("üì∑ Perfeito! Agora, por favor, envie a <b>foto</b> da ocorr√™ncia:", parse_mode=ParseMode.HTML)
            return FOTO 

        elif query.data == "data_manual":
            await query.message.edit_text("‚úçÔ∏è Entendido. Por favor, digite a data no formato <b>AAAA/MM/DD</b> (ex: 2025/06/04):", parse_mode=ParseMode.HTML)
            return DATA_MANUAL 

    else: # Se a entrada veio de uma mensagem de texto (digita√ß√£o manual).
        texto = update.message.text.strip()
        try:
            # Tenta converter o texto para o formato de data.
            dt = datetime.strptime(texto, "%Y/%m/%d")
            context.user_data['data'] = dt.strftime("%Y-%m-%d")
            await update.message.reply_text(f"‚úÖ Data registrada: <b>{dt.strftime('%Y/%m/%d')}</b>.", parse_mode=ParseMode.HTML)
            await update.message.reply_text("üì∑ Perfeito! Agora, por favor, envie a <b>foto</b> da ocorr√™ncia:", parse_mode=ParseMode.HTML)
            return FOTO 
        except ValueError:
            # Se o formato estiver incorreto.
            await update.message.reply_text("‚ùó Formato inv√°lido. Por favor, digite a data no formato <b>AAAA/MM/DD</b> (ex: 2025/06/04):", parse_mode=ParseMode.HTML)
            return DATA_MANUAL 


# --- Etapa: Foto da Ocorr√™ncia ---
async def foto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        # Se o que foi enviado n√£o √© uma foto.
        await update.message.reply_text("‚ùó Isso n√£o parece uma foto. Por favor, envie uma <b>foto v√°lida</b> da ocorr√™ncia.", parse_mode=ParseMode.HTML)
        return FOTO # Pedimos novamente a foto.

    photo = update.message.photo[-1] # Pego a foto de maior resolu√ß√£o.
    telegram_file = await context.bot.get_file(photo.file_id) # Obtenho o objeto de arquivo do Telegram.
    photo_bytes = await telegram_file.download_as_bytearray() # Baixo a foto para a mem√≥ria.

    # Gero um nome de arquivo √∫nico para o Google Drive, usando o ID do usu√°rio e um timestamp.
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    user_id = update.effective_user.id
    filename = f"foto_{user_id}_{timestamp}.jpg" 

    logger.info(f"Tentando fazer upload da foto {filename} para o Google Drive.")
    # Dou um feedback imediato para o usu√°rio, avisando que o upload est√° em andamento.
    await update.message.reply_text("‚è≥ Enviando a foto para o Google Drive... Por favor, aguarde, isso pode levar alguns segundos.", parse_mode=ParseMode.HTML) 
    # Chamo a fun√ß√£o de upload para o Google Drive.
    drive_file_id = await upload_photo_to_drive(bytes(photo_bytes), filename) 
    
    if drive_file_id:
        # Se o upload foi um sucesso.
        context.user_data["foto"] = drive_file_id # Salvo o ID do arquivo no Google Drive.
        logger.info(f"Foto salva no Google Drive. ID: {drive_file_id}")
        await update.message.reply_text("‚úÖ Foto recebida e enviada para o Google Drive com sucesso!")
    else:
        # Se houve um erro no upload.
        context.user_data["foto"] = "Erro no upload" # Indico a falha.
        logger.error("Falha ao enviar foto para o Google Drive.")
        await update.message.reply_text("‚ùå Ocorreu um erro ao enviar a foto para o Google Drive. Por favor, tente novamente.", parse_mode=ParseMode.HTML)
        return FOTO # Permane√ßo no estado de foto para o usu√°rio tentar de novo.

    context.user_data["demandas"] = [] # Inicializo a lista de demandas para esta ocorr√™ncia.

    # Bot√µes para perguntar se o usu√°rio quer adicionar demandas.
    buttons = [
        [InlineKeyboardButton("‚ûï Adicionar demanda", callback_data="add_demanda")],
        [InlineKeyboardButton("‚è≠Ô∏è Pular demandas", callback_data="fim_demandas")], 
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await update.message.reply_text("üìù Quer adicionar uma <b>demanda</b> relacionada a esta ocorr√™ncia?", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return DEMANDA_ESCOLHA 

# --- Etapa: Demanda ---
# Lida com a escolha de adicionar demandas ou finalizar.
async def demanda(update, context):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "add_demanda":
        # Se o usu√°rio quer adicionar uma demanda.
        await query.edit_message_text("‚úçÔ∏è Certo. Por favor, digite o <b>texto completo da demanda</b>:", parse_mode=ParseMode.HTML)
        return DEMANDA_DIGITAR 

    elif data == "fim_demandas":
        # Se o usu√°rio quer finalizar as demandas.
        await query.edit_message_text("‚úÖ Ok, finalizando as demandas. Vamos para o <b>resumo</b> da ocorr√™ncia.", parse_mode=ParseMode.HTML)
        return await resumo(update, context) # Chamo a fun√ß√£o de resumo.

    elif data == "pular_demanda": # Este √© um callback_data alternativo, caso voc√™ use.
        await query.edit_message_text("Voc√™ optou por pular as demandas.")
        return await resumo(update, context)


# Recebe o texto principal da demanda.
async def demanda_digitar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]= {
        "texto": update.message.text
    }
    await update.message.reply_text("üî¢ Agora, informe o <b>n√∫mero do OV</b> (Or√ßamento de Venda) relacionado a esta demanda (se n√£o tiver, digite 'N/A'):", parse_mode=ParseMode.HTML)
    return OV 

# Recebe o n√∫mero do OV.
async def ov(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]["ov"] = update.message.text
    await update.message.reply_text("üî¢ E qual o <b>n√∫mero do PRO</b> (Projeto) relacionado (se n√£o tiver, digite 'N/A')?", parse_mode=ParseMode.HTML)
    return PRO 

# Recebe o n√∫mero do PRO.
async def pro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]["pro"] = update.message.text

    # Bot√µes para decidir sobre adicionar observa√ß√£o.
    keyboard = [
        [InlineKeyboardButton("‚ûï Adicionar observa√ß√£o", callback_data="add_obs")],
        [InlineKeyboardButton("‚è≠Ô∏è Pular observa√ß√£o", callback_data="skip_obs")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üí¨ Deseja adicionar uma <b>observa√ß√£o</b> espec√≠fica para esta demanda?", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return OBSERVACAO_ESCOLHA 

# Lida com a escolha de adicionar ou pular observa√ß√£o.
async def observacao_escolha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "add_obs":
        await query.message.reply_text("‚úçÔ∏è Por favor, digite a <b>observa√ß√£o</b> para esta demanda:", parse_mode=ParseMode.HTML)
        return OBSERVACAO_DIGITAR 
    else:
        context.user_data["nova_demanda"]["observacao"] = "" # Se pulou, a observa√ß√£o fica vazia.
        return await salvar_demanda(update, context) # Salva a demanda.

# Recebe o texto da observa√ß√£o digitada.
async def observacao_digitar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]["observacao"] = update.message.text
    return await salvar_demanda(update, context) # Salva a demanda.

# Salva a demanda atual no dicion√°rio principal de demandas do usu√°rio.
async def salvar_demanda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    demanda = context.user_data.pop("nova_demanda", None) # Pego e removo a demanda tempor√°ria.
    if demanda:
        context.user_data.setdefault("demandas", []).append(demanda) # Adiciono √† lista de demandas.

    # Bot√µes para adicionar outra demanda ou finalizar.
    buttons = [
        [InlineKeyboardButton("‚ûï Adicionar outra demanda", callback_data="add_demanda")],
        [InlineKeyboardButton("‚úÖ Finalizar demandas", callback_data="fim_demandas")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    # Responde ou edita a mensagem com feedback.
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "‚úÖ Demanda adicionada com sucesso! Deseja adicionar outra demanda ou <b>finalizar</b>?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else: 
        await update.message.reply_text(
            "‚úÖ Demanda adicionada com sucesso! Deseja adicionar outra demanda ou <b>finalizar</b>?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    return DEMANDA_ESCOLHA 


# --- Etapa: Resumo da Ocorr√™ncia ---
# Mostra um resumo de todos os dados coletados antes da confirma√ß√£o final.
async def resumo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Determino onde o bot deve responder (se √© uma query de bot√£o ou uma mensagem normal).
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message_target = query.message
    elif update.message: 
        message_target = update.message
    else:
        logger.error("A fun√ß√£o 'resumo' foi chamada sem um 'update.message' ou 'update.callback_query' v√°lido.")
        return ConversationHandler.END 

    dados = context.user_data # Pego todos os dados coletados do usu√°rio para o resumo.

    # Formato a informa√ß√£o da foto (mostro o ID do Drive para refer√™ncia).
    foto_info = dados.get('foto', 'N/A')
    if foto_info != 'N/A' and foto_info != 'Erro no upload':
        foto_display = f"ID no Drive: <code>{foto_info}</code>"
    else:
        foto_display = foto_info

    # Construo o texto do resumo com emojis e formata√ß√£o HTML para destacar.
    resumo_texto = (
        f"‚ú® <b>Resumo da Ocorr√™ncia:</b> ‚ú®\n\n"
        f"üë§ <b>Colaborador:</b> {dados.get('colaborador', 'N/A')}\n"
        f"ü§ù <b>Tipo de Visita:</b> {dados.get('tipo_visita', 'N/A')}\n" # ADICIONADO: Tipo de Visita
        f"üè¢ <b>√ìrg√£o P√∫blico:</b> {dados.get('orgao_publico', 'N/A')}\n"
        f"üßë‚Äçüíº <b>Figura P√∫blica:</b> {dados.get('figura_publica', 'N/A')}\n"
        f"üíº <b>Cargo:</b> {dados.get('cargo', 'N/A')}\n"
        f"üìå <b>Assunto:</b> {dados.get('assunto', 'N/A')}\n"
        f"üåç <b>Munic√≠pio:</b> {dados.get('municipio', 'N/A')}\n"
        f"üìÖ <b>Data:</b> {dados.get('data', 'N/A')}\n"
        f"üì∑ <b>Foto:</b> {foto_display}\n\n"
        f"üìù <b>Demandas Registradas:</b>\n"
    )

    demandas = dados.get("demandas", [])
    if demandas:
        # Listo cada demanda com seus detalhes.
        for i, d in enumerate(demandas, 1):
            resumo_texto += (
                f"<b>{i}. Demanda:</b> {d.get('texto', 'N/A')}\n"
                f"   ‚Ä¢ OV: {d.get('ov', 'N/A')} | PRO: {d.get('pro', 'N/A')}\n"
                f"   ‚Ä¢ Obs: {d.get('observacao', 'N/A')}\n"
            )
    else:
        resumo_texto += "<i>Nenhuma demanda adicional registrada.</i>\n" # Mensagem se n√£o houver demandas.

    # Bot√µes para confirmar o salvamento ou cancelar tudo.
    buttons = [
        [InlineKeyboardButton("‚úÖ Confirmar e Salvar", callback_data="confirmar_salvar")],
        [InlineKeyboardButton("‚ùå Cancelar Tudo", callback_data="cancelar_resumo")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await message_target.reply_text(
        resumo_texto,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML 
    )

    return CONFIRMACAO_FINAL 


# --- Etapa: Confirma√ß√£o Final de Salvamento ---
async def confirmacao(update, context):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "confirmar_salvar":
        # Salvo os dados no PostgreSQL (usando a fun√ß√£o do 'utils.py').
        utils.salvar_no_banco(context.user_data) 
        # Aciono a exporta√ß√£o dos dados do PostgreSQL para arquivos Excel no Google Drive.
        export_data_to_drive() 
        await query.edit_message_text(
            "üéâ Dados salvos com sucesso no banco de dados e nos arquivos Excel do Google Drive! Muito obrigado pelo seu registro.", 
            parse_mode=ParseMode.HTML
        )
        context.user_data.clear() # Limpo todos os dados da conversa do usu√°rio.
        return ConversationHandler.END # Encerro a conversa.

    elif data == "cancelar_resumo":
        await query.edit_message_text(
            "üö´ Opera√ß√£o cancelada no resumo. Os dados n√£o foram salvos. Use /iniciar para come√ßar novamente.", 
            parse_mode=ParseMode.HTML
        )
        context.user_data.clear() # Limpo os dados.
        return ConversationHandler.END 
    
# --- Fun√ß√£o de Fallback para Cancelar ---
# Esta fun√ß√£o √© importante! Ela √© usada como um "bot√£o de p√¢nico" no ConversationHandler.
# Se o usu√°rio digitar /cancelar a qualquer momento, esta fun√ß√£o ser√° chamada para encerrar a conversa.
async def cancelar_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ Opera√ß√£o cancelada. Use /iniciar para reiniciar o registro.")
    context.user_data.clear()
    return ConversationHandler.END

