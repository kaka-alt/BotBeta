from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, CallbackQueryHandler, filters
from datetime import datetime
import os
import csv
import logging 
from telegram.constants import ParseMode 
from google.oauth2.service_account import Credentials



# Importa as fun√ß√µes que interagem com o Google Drive, como upload de fotos e exporta√ß√£o de dados Excel.
from exportar_para_excel import export_data_to_drive, upload_photo_to_drive 

# Importa m√≥dulos de suporte para configura√ß√µes (config), utilidades (utils) e dados globais (globals).
import config 
import utils  
from globals import user_data 

# Configura o logger para este arquivo, √∫til para acompanhar o que est√° acontecendo no Render.
logger = logging.getLogger(__name__)

# --- Defini√ß√£o dos Estados da Nossa Conversa ---
# Ajustei o range() para incluir os novos estados para o loop de figuras/√≥rg√£os
COLABORADOR, COLABORADOR_MANUAL, TIPO_VISITA, \
ORGAO_FIGURA_CARGO_ESCOLHA, ORGAO_PUBLICO_FOR_FIGURA_KEYWORD, ORGAO_PUBLICO_FOR_FIGURA_PAGINACAO, ORGAO_PUBLICO_FOR_FIGURA_MANUAL, \
FIGURA_PUBLICA_FOR_FIGURA, CARGO_FOR_FIGURA, MAIS_FIGURAS_ORGAOS, \
ASSUNTO_INICIAL_ESCOLHA, ASSUNTO_PALAVRA_CHAVE, ASSUNTO_PAGINACAO, ASSUNTO_MANUAL, \
MUNICIPIO, DATA, DATA_MANUAL, FOTO, DEMANDA_ESCOLHA, DEMANDA_DIGITAR, OV, PRO, \
OBSERVACAO_ESCOLHA, OBSERVACAO_DIGITAR, CONFIRMACAO_FINAL, TIPO_ATENDIMENTO = range(26) # AJUSTADO: range(26) para os novos estados


# --- In√≠cio do Nosso Registro: Sele√ß√£o do Colaborador ---
async def iniciar_colaborador(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [InlineKeyboardButton(name, callback_data=f"colaborador_{name}") for name in config.COLABORADORES]
    buttons.append(InlineKeyboardButton("Outro", callback_data="colaborador_outro"))
    keyboard = InlineKeyboardMarkup(utils.build_menu(buttons, n_cols=2))
    await update.message.reply_text(
        "üëã Ol√°! Vamos come√ßar o registro da ocorr√™ncia.\nPor favor, selecione o <b>colaborador</b> na lista ou clique em 'Outro' para digitar manualmente:", 
        reply_markup=keyboard, 
        parse_mode=ParseMode.HTML 
    )
    return COLABORADOR

# Lida com a escolha do colaborador via bot√£o ou a op√ß√£o "Outro".
async def colaborador_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query 
    await query.answer() 
    data = query.data 

    if data == "colaborador_outro":
        await query.message.reply_text("‚úçÔ∏è Entendido! Por favor, digite o <b>nome completo do colaborador</b>:")
        return COLABORADOR_MANUAL 
    else:
        colaborador = data.replace("colaborador_", "") 
        context.user_data['colaborador'] = colaborador 
        await query.message.edit_text(f"‚úÖ Colaborador selecionado: <b>{colaborador}</b>.", parse_mode=ParseMode.HTML) 
        # Transi√ß√£o para o estado de TIPO_VISITA
        return await solicitar_tipo_visita(update, context) 

# Lida com a entrada manual do nome do colaborador.
async def colaborador_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nome = update.message.text.strip() 
    context.user_data['colaborador'] = nome 
    await update.message.reply_text(f"‚úÖ Colaborador registrado: <b>{nome}</b>.", parse_mode=ParseMode.HTML)
    # Transi√ß√£o para o estado de TIPO_VISITA
    return await solicitar_tipo_visita(update, context) 


# --- Etapa: Tipo de Visita ---
async def solicitar_tipo_visita(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        InlineKeyboardButton("üîÑ Reativa", callback_data="tipo_visita_reativo"),
        InlineKeyboardButton("üéØ Proativa", callback_data="tipo_visita_proativo"),
    ]
    keyboard = InlineKeyboardMarkup.from_row(buttons)

    if update.message:
        await update.message.reply_text("ü§ù Excelente! Agora, por favor, selecione o <b>tipo da visita</b> realizada:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    elif update.callback_query:
        await update.callback_query.message.reply_text("ü§ù Excelente! Agora, por favor, selecione o <b>tipo da visita</b> realizada:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

    return TIPO_VISITA 

async def tipo_visita_escolha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    tipo_visita = data.replace("tipo_visita_", "") 
    context.user_data['tipo_visita'] = tipo_visita.upper() 

    await query.message.edit_text(f"‚úÖ Tipo de visita selecionado: <b>{tipo_visita.capitalize()}</b>.", parse_mode=ParseMode.HTML)
    # NOVO FLUXO: Ap√≥s o tipo de visita, pergunta se quer adicionar figura p√∫blica/√≥rg√£o
    return await solicitar_tipo_atendimento(update, context)

#ATENDIMENTO!!!!
async def solicitar_tipo_atendimento(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("‚ö° PRESENCIAL - EDP", callback_data="tipo_atendimento_presencial - edp")],
        [InlineKeyboardButton("üó∫Ô∏è PRESENCIAL - EXTERNO", callback_data="tipo_atendimento_presencial - externo")],
        [InlineKeyboardButton("üíª VIRTUAL", callback_data="tipo_atendimento_virtual")],
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    if update.message:
        await update.message.reply_text("ü§ù Excelente! Agora, por favor, selecione o <b>tipo de atendimento</b> realizado:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    elif update.callback_query:
        await update.callback_query.message.reply_text("ü§ù Excelente! Agora, por favor, selecione o <b>tipo de atendimento</b> realizado:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

    return TIPO_ATENDIMENTO

async def tipo_atendimento_escolha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    tipo_atendimento = data.replace("tipo_atendimento_", "")
    context.user_data['tipo_atendimento'] = tipo_atendimento.upper()

    await query.message.edit_text(f"‚úÖ Tipo de atendimento selecionado: <b>{tipo_atendimento.capitalize()}</b>.", parse_mode=ParseMode.HTML)
    # NOVO FLUXO: Ap√≥s o tipo de atendimento, pergunta se quer adicionar figura p√∫blica/√≥rg√£o
    context.user_data["figuras_orgaos"] = [] # Inicializa a lista de figuras/√≥rg√£os
    return await solicitar_figura_orgao_inicial(update, context)



# --- NOVO FLUXO: M√∫ltiplas Figuras P√∫blicas/√ìrg√£os ---

# Pergunta se o usu√°rio quer adicionar uma figura p√∫blica e √≥rg√£o
async def solicitar_figura_orgao_inicial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("‚ûï Adicionar Figura/√ìrg√£o", callback_data="add_figura_orgao")],
        [InlineKeyboardButton("‚è≠Ô∏è Pular Figuras/√ìrg√£os", callback_data="fim_figuras_orgaos")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    # Verifica se a chamada veio de uma mensagem ou de um callback_query
    if update.callback_query:
        await update.callback_query.message.reply_text(
            "üßë‚Äçü§ù‚Äçüè¢ Deseja adicionar uma <b>Figura P√∫blica</b> e o <b>√ìrg√£o</b> relacionado a esta ocorr√™ncia?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    elif update.message:
         await update.message.reply_text(
            "üßë‚Äçü§ù‚Äçüè¢ Deseja adicionar uma <b>Figura P√∫blica</b> e o <b>√ìrg√£o</b> relacionado a esta ocorr√™ncia?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    return ORGAO_FIGURA_CARGO_ESCOLHA # Novo estado para escolha inicial

# Lida com a escolha inicial de adicionar figura p√∫blica/√≥rg√£o
async def figura_orgao_escolha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "add_figura_orgao":
        await query.edit_message_text("üè† Ok! Digite uma <b>palavra-chave</b> para buscar o <b>√≥rg√£o p√∫blico</b> desta figura:", parse_mode=ParseMode.HTML)
        return ORGAO_PUBLICO_FOR_FIGURA_KEYWORD # Inicia o sub-fluxo para coletar Figura/√ìrg√£o
    elif data == "fim_figuras_orgaos":
        await query.edit_message_text("‚úÖ Ok, finalizando a adi√ß√£o de Figuras e √ìrg√£os.")
        # FLUXO CORRIGIDO: Ap√≥s finalizar figuras/√≥rg√£os, segue para Assunto
        return await solicitar_assunto_inicial(update, context)

# --- Sub-fluxo para coletar √ìrg√£o P√∫blico (DENTRO do loop de figuras) ---
async def buscar_orgao_for_figura(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyword = update.message.text.lower()
    orgaos = utils.ler_orgaos_csv()
    resultados = [o for o in orgaos if keyword in o.lower()]
    context.user_data['temp_orgaos_busca_for_figura'] = resultados # Usa uma temp var para este sub-fluxo
    context.user_data['temp_orgao_pagina_for_figura'] = 0

    if not resultados:
        await update.message.reply_text("‚ùó Nenhum √≥rg√£o encontrado. Digite manualmente o nome do <b>√≥rg√£o p√∫blico</b> para esta figura:", parse_mode=ParseMode.HTML)
        return ORGAO_PUBLICO_FOR_FIGURA_MANUAL

    buttons, pagina_atual = utils.botoes_pagina(resultados, 0, prefix="orgao_figura_") # Prefixo diferente
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(f"Resultados encontrados : {len(resultados)}", reply_markup=keyboard)
    return ORGAO_PUBLICO_FOR_FIGURA_PAGINACAO

async def orgao_paginacao_for_figura(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    pagina_atual = context.user_data.get("temp_orgao_pagina_for_figura", 0)
    resultados = context.user_data.get("temp_orgaos_busca_for_figura", [])

    if data == "orgao_figura_proximo":
        pagina_atual += 1
        context.user_data["temp_orgao_pagina_for_figura"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="orgao_figura_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes))
        return ORGAO_PUBLICO_FOR_FIGURA_PAGINACAO

    elif data == "orgao_figura_voltar":
        pagina_atual = max(0, pagina_atual - 1)
        context.user_data["temp_orgao_pagina_for_figura"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="orgao_figura_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes))
        return ORGAO_PUBLICO_FOR_FIGURA_PAGINACAO

    elif data == "orgao_figura_inserir_manual":
        await query.message.reply_text("‚úçÔ∏è Digite manualmente o nome do <b>√≥rg√£o p√∫blico</b> para esta figura:", parse_mode=ParseMode.HTML)
        return ORGAO_PUBLICO_FOR_FIGURA_MANUAL

    elif data == "orgao_figura_refazer_busca":
        await query.message.reply_text("üîé Digite uma nova palavra-chave para buscar o √≥rg√£o desta figura:", parse_mode=ParseMode.HTML)
        return ORGAO_PUBLICO_FOR_FIGURA_KEYWORD

    else:
        orgao_selecionado = data.replace("orgao_figura_", "")
        context.user_data["nova_figura_orgao"] = {"orgao_publico": orgao_selecionado} # Inicia o objeto tempor√°rio
        await query.message.edit_text(f"üè¢ √ìrg√£o selecionado: <b>{orgao_selecionado}</b>.", parse_mode=ParseMode.HTML)
        await query.message.reply_text("üßë‚Äçüíº √ìtimo! Agora, digite o <b>nome completo da figura p√∫blica</b>:", parse_mode=ParseMode.HTML)
        return FIGURA_PUBLICA_FOR_FIGURA # Pr√≥ximo passo no sub-fluxo

async def orgao_manual_for_figura(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nome = update.message.text.strip()
    context.user_data["nova_figura_orgao"] = {"orgao_publico": nome} # Inicia o objeto tempor√°rio
    utils.salvar_orgao(nome)
    await update.message.reply_text(f"‚úîÔ∏è √ìrg√£o p√∫blico registrado manualmente: <b>{nome}</b>.", parse_mode=ParseMode.HTML)
    await update.message.reply_text("üßë‚Äçüíº √ìtimo! Agora, digite o <b>nome completo da figura p√∫blica</b>:", parse_mode=ParseMode.HTML)
    return FIGURA_PUBLICA_FOR_FIGURA

# Coleta Figura P√∫blica (dentro do loop)
async def figura_publica_input_for_figura(update: Update, context: ContextTypes.DEFAULT_TYPE):
    figura_publica = update.message.text.strip()
    context.user_data["nova_figura_orgao"]["figura_publica"] = figura_publica
    await update.message.reply_text(f"‚úÖ Figura p√∫blica registrada: <b>{figura_publica}</b>.", parse_mode=ParseMode.HTML)
    await update.message.reply_text("üíº Qual √© o <b>Cargo</b> desta figura p√∫blica?", parse_mode=ParseMode.HTML)
    return CARGO_FOR_FIGURA

# Coleta Cargo (dentro do loop)
async def cargo_input_for_figura(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cargo = update.message.text.strip()
    context.user_data["nova_figura_orgao"]["cargo"] = cargo
    await update.message.reply_text(f"‚úÖ Cargo registrado: <b>{cargo}</b>.", parse_mode=ParseMode.HTML)
    
    # Salva o conjunto completo (√≥rg√£o, figura, cargo) e pergunta se quer adicionar mais
    return await salvar_figura_orgao_set(update, context)

async def salvar_figura_orgao_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fig_org_set = context.user_data.pop("nova_figura_orgao", None)
    if fig_org_set:
        context.user_data.setdefault("figuras_orgaos", []).append(fig_org_set)

    buttons = [
        [InlineKeyboardButton("‚ûï Adicionar outra Figura/√ìrg√£o", callback_data="add_figura_orgao")],
        [InlineKeyboardButton("‚úÖ Finalizar Figuras/√ìrg√£os", callback_data="fim_figuras_orgaos")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    # Responde √† mensagem ou edita a query.
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "‚úÖ Figura/√ìrg√£o adicionado(a) com sucesso! Deseja adicionar outro(a)?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else: # Se a chamada veio de um MessageHandler (ex: cargo_input_for_figura)
        await update.message.reply_text(
            "‚úÖ Figura/√ìrg√£o adicionado(a) com sucesso! Deseja adicionar outro(a)?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    return ORGAO_FIGURA_CARGO_ESCOLHA # Volta para a escolha inicial do loop

# --- FIM NOVO FLUXO: M√∫ltiplas Figuras P√∫blicas/√ìrg√£os ---


# --- Etapa: Assunto (Menu Inicial e Busca) ---
async def solicitar_assunto_inicial(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [InlineKeyboardButton(assunto, callback_data=f"assunto_pre_{assunto}") for assunto in config.PREDEFINED_ASSUNTOS]
    buttons.append(InlineKeyboardButton("Outro (digitar ou buscar)", callback_data="assunto_outro"))
    keyboard = InlineKeyboardMarkup(utils.build_menu(buttons, n_cols=2)) 

    if update.message:
        await update.message.reply_text("‚úâÔ∏è Por favor, selecione o <b>assunto</b> da ocorr√™ncia nas op√ß√µes abaixo:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    elif update.callback_query:
        await update.callback_query.message.reply_text("‚úâÔ∏è Por favor, selecione o <b>assunto</b> da ocorr√™ncia nas op√ß√µes abaixo:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

    return ASSUNTO_INICIAL_ESCOLHA # Novo estado para lidar com a escolha inicial

async def assunto_inicial_escolha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "assunto_outro":
        await query.message.edit_text("‚úçÔ∏è Entendido. Por favor, digite uma <b>palavra-chave</b> para buscar ou o <b>assunto completo</b> que deseja registrar:", parse_mode=ParseMode.HTML)
        return ASSUNTO_PALAVRA_CHAVE 
    else:
        assunto_selecionado = data.replace("assunto_pre_", "")
        context.user_data["assunto"] = assunto_selecionado
        await query.message.edit_text(f"‚úÖ Assunto selecionado: <b>{assunto_selecionado}</b>.", parse_mode=ParseMode.HTML)
        await query.message.reply_text("üèôÔ∏è Quase l√°! Em qual <b>munic√≠pio</b> a ocorr√™ncia aconteceu?", parse_mode=ParseMode.HTML)
        return MUNICIPIO 


# --- Etapa: Assunto (L√≥gica de Busca/Pagina√ß√£o Existente) ---
async def buscar_assunto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    palavra_chave = update.message.text.lower()
    assuntos = utils.ler_assuntos_csv() 
    resultados = [a for a in assuntos if palavra_chave in a.lower()]
    context.user_data['assuntos_busca'] = resultados
    context.user_data['assunto_pagina'] = 0

    if not resultados:
        await update.message.reply_text("‚ùó Nenhum assunto encontrado com essa palavra-chave. Por favor, digite <b>manualmente o assunto completo</b>:", parse_mode=ParseMode.HTML)
        return ASSUNTO_MANUAL
    
    buttons, pagina_atual = utils.botoes_pagina(resultados, 0, prefix="assunto_")
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(f"üîé Encontrei <b>{len(resultados)} resultados</b> para '<i>{palavra_chave}</i>'. Selecione abaixo ou navegue nas op√ß√µes:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    return ASSUNTO_PAGINACAO

# Lida com a navega√ß√£o na lista de assuntos e a sele√ß√£o.
async def assunto_paginacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    pagina_atual = context.user_data.get("assunto_pagina", 0)
    resultados = context.user_data.get("assuntos_busca", [])

    if data == "assunto_proximo":
        pagina_atual += 1
        context.user_data["assunto_pagina"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="assunto_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes))
        return ASSUNTO_PAGINACAO

    elif data == "assunto_voltar":
        pagina_atual = max(0, pagina_atual - 1)
        context.user_data["assunto_pagina"] = pagina_atual
        botoes, _ = utils.botoes_pagina(resultados, pagina_atual, prefix="assunto_")
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(botoes))
        return ASSUNTO_PAGINACAO

    elif data == "assunto_inserir_manual":
        await query.message.reply_text("‚úçÔ∏è Certo. Por favor, digite <b>manualmente o assunto completo</b>:", parse_mode=ParseMode.HTML)
        return ASSUNTO_MANUAL

    elif data == "assunto_refazer_busca":
        await query.message.reply_text("üîÑ Ok, vamos refazer a busca. Digite uma nova <b>palavra-chave</b> para o assunto:", parse_mode=ParseMode.HTML)
        return ASSUNTO_PALAVRA_CHAVE

    else:
        assunto_selecionado = data.replace("assunto_", "")
        context.user_data["assunto"] = assunto_selecionado
        await query.message.edit_text(f"‚úÖ Assunto selecionado: <b>{assunto_selecionado}</b>.", parse_mode=ParseMode.HTML)
        await query.message.reply_text("üèôÔ∏è Quase l√°! Em qual <b>munic√≠pio</b> a ocorr√™ncia aconteceu?", parse_mode=ParseMode.HTML)
        return MUNICIPIO

# Lida com o assunto digitado manualmente.
async def assunto_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    assunto = update.message.text.strip()
    context.user_data['assunto'] = assunto
    utils.salvar_assunto(assunto) 
    await update.message.reply_text(f"‚úÖ Assunto registrado: <b>{assunto}</b>.", parse_mode=ParseMode.HTML)
    await update.message.reply_text("üèôÔ∏è Quase l√°! Em qual <b>munic√≠pio</b> a ocorr√™ncia aconteceu?", parse_mode=ParseMode.HTML)
    return MUNICIPIO


# --- Etapa: Munic√≠pio ---
async def municipio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['municipio'] = update.message.text.strip().upper()
    await update.message.reply_text(f"‚úÖ Munic√≠pio registrado: <b>{context.user_data['municipio']}</b>.", parse_mode=ParseMode.HTML)
    return await solicitar_data(update, context) 


# --- Etapa: Data da Ocorr√™ncia ---
async def solicitar_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        InlineKeyboardButton("üìÖ Usar data/hora atual", callback_data="data_hoje"),
        InlineKeyboardButton("‚úèÔ∏è Digitar data manualmente", callback_data="data_manual"),
    ]
    keyboard = InlineKeyboardMarkup.from_row(buttons)

    if update.message: 
        await update.message.reply_text("üóìÔ∏è Por favor, selecione uma op√ß√£o para a <b>data da ocorr√™ncia</b>:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    elif update.callback_query: 
        await update.callback_query.message.reply_text("üóìÔ∏è Por favor, selecione uma op√ß√£o para a <b>data da ocorr√™ncia</b>:", reply_markup=keyboard, parse_mode=ParseMode.HTML)

    return DATA 

async def data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query: 
        query = update.callback_query
        await query.answer()

        if query.data == "data_hoje":
            dt = datetime.now()
            context.user_data['data'] = dt.strftime("%Y-%m-%d") 
            await query.message.edit_text(f"‚úÖ Data registrada: <b>{dt.strftime('%Y/%m/%d %H:%M')}</b>.", parse_mode=ParseMode.HTML)

            # Pula diretamente para a etapa de demanda
            buttons = [
                [InlineKeyboardButton("‚ûï Adicionar demanda", callback_data="add_demanda")],
                [InlineKeyboardButton("‚è≠Ô∏è Pular demandas", callback_data="fim_demandas")], 
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.reply_text("üìù Quer adicionar uma <b>demanda</b> relacionada a esta ocorr√™ncia?", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            return DEMANDA_ESCOLHA

        elif query.data == "data_manual":
            await query.message.edit_text("‚úçÔ∏è Entendido. Por favor, digite a data no formato <b>AAAA/MM/DD</b> (ex: 2025/06/04):", parse_mode=ParseMode.HTML)
            return DATA_MANUAL

    else:  # Usu√°rio digitou manualmente a data
        texto = update.message.text.strip()
        try:
            dt = datetime.strptime(texto, "%Y/%m/%d")
            context.user_data['data'] = dt.strftime("%Y-%m-%d")
            await update.message.reply_text(f"‚úÖ Data registrada: <b>{dt.strftime('%Y/%m/%d')}</b>.", parse_mode=ParseMode.HTML)

            buttons = [
                [InlineKeyboardButton("‚ûï Adicionar demanda", callback_data="add_demanda")],
                [InlineKeyboardButton("‚è≠Ô∏è Pular demandas", callback_data="fim_demandas")], 
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text("üìù Quer adicionar uma <b>demanda</b> relacionada a esta ocorr√™ncia?", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            return DEMANDA_ESCOLHA 
        except ValueError:
            await update.message.reply_text("‚ùó Formato inv√°lido. Por favor, digite a data no formato <b>AAAA/MM/DD</b> (ex: 2025/06/04):", parse_mode=ParseMode.HTML)
            return DATA_MANUAL


 #--- Etapa: Foto da Ocorr√™ncia (DESATIVADA TEMPORARIAMENTE) ---
async def foto(update: Update, context: ContextTypes.DEFAULT_TYPE):
     if not update.message.photo:
         await update.message.reply_text("‚ùó Isso n√£o parece uma foto. Por favor, envie uma <b>foto v√°lida</b> da ocorr√™ncia.", parse_mode=ParseMode.HTML)
         return FOTO

     photo = update.message.photo[-1] 
     telegram_file = await context.bot.get_file(photo.file_id) 
     photo_bytes = await telegram_file.download_as_bytearray() 

     timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
     user_id = update.effective_user.id
     filename = f"foto_{user_id}_{timestamp}.jpg" 

     logger.info(f"Tentando fazer upload da foto {filename} para o Google Drive.")
     await update.message.reply_text("‚è≥ Enviando a foto para o Google Drive... Por favor, aguarde, isso pode levar alguns segundos.", parse_mode=ParseMode.HTML) 
     drive_file_id = await upload_photo_to_drive(bytes(photo_bytes), filename) 
    
     if drive_file_id:
         context.user_data["foto"] = drive_file_id 
         logger.info(f"Foto salva no Google Drive. ID: {drive_file_id}")
         await update.message.reply_text("‚úÖ Foto recebida e enviada para o Google Drive com sucesso!")
     else:
         context.user_data["foto"] = "Erro no upload" 
         logger.error("Falha ao enviar foto para o Google Drive.")
         await update.message.reply_text("‚ùå Ocorreu um erro ao enviar a foto para o Google Drive. Por favor, tente novamente.", parse_mode=ParseMode.HTML)
         return FOTO 

     context.user_data["demandas"] = [] 

     buttons = [
         [InlineKeyboardButton("‚ûï Adicionar demanda", callback_data="add_demanda")],
         [InlineKeyboardButton("‚è≠Ô∏è Pular demandas", callback_data="fim_demandas")], 
     ]
     reply_markup = InlineKeyboardMarkup(buttons)

     await update.message.reply_text("üìù Quer adicionar uma <b>demanda</b> relacionada a esta ocorr√™ncia?", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
     return DEMANDA_ESCOLHA 


# --- Etapa: Demanda ---
async def demanda(update, context):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "add_demanda":
        await query.edit_message_text("‚úçÔ∏è Certo. Por favor, digite o <b>texto completo da demanda</b>:", parse_mode=ParseMode.HTML)
        return DEMANDA_DIGITAR 

    elif data == "fim_demandas":
        await query.edit_message_text("‚úÖ Ok, finalizando as demandas. Vamos para o <b>resumo</b> da ocorr√™ncia.", parse_mode=ParseMode.HTML)
        return await resumo(update, context) 

    elif data == "pular_demanda": 
        await query.edit_message_text("Voc√™ optou por pular as demandas.")
        return await resumo(update, context)


# Recebe o texto principal da demanda.
async def demanda_digitar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]= {
        "texto": update.message.text
    }
    await update.message.reply_text("üî¢ Agora, informe o <b>n√∫mero do OV</b> (Or√ßamento de Venda) relacionado a esta demanda (se n√£o tiver, digite 'N/A'):", parse_mode=ParseMode.HTML)
    return OV 

# Recebe o n√∫mero do OV.
async def ov(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]["ov"] = update.message.text
    await update.message.reply_text("üî¢ E qual o <b>n√∫mero do PRO</b> (Protocolo) relacionado (se n√£o tiver, digite 'N/A')?", parse_mode=ParseMode.HTML)
    return PRO 

# Recebe o n√∫mero do PRO.
async def pro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]["pro"] = update.message.text

    buttons = [
        [InlineKeyboardButton("‚ûï Adicionar observa√ß√£o", callback_data="add_obs")],
        [InlineKeyboardButton("‚è≠Ô∏è Pular observa√ß√£o", callback_data="skip_obs")]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("üí¨ Deseja adicionar uma <b>observa√ß√£o</b> espec√≠fica para esta demanda?", reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return OBSERVACAO_ESCOLHA 

# Lida com a escolha de adicionar ou pular observa√ß√£o.
async def observacao_escolha(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "add_obs":
        await query.message.reply_text("‚úçÔ∏è Por favor, digite a <b>observa√ß√£o</b> para esta demanda:", parse_mode=ParseMode.HTML)
        return OBSERVACAO_DIGITAR 
    else:
        context.user_data["nova_demanda"]["observacao"] = "" 
        return await salvar_demanda(update, context) 

# Recebe o texto da observa√ß√£o digitada.
async def observacao_digitar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nova_demanda"]["observacao"] = update.message.text
    return await salvar_demanda(update, context) 

# Salva a demanda atual no dicion√°rio principal de demandas do usu√°rio.
async def salvar_demanda(update: Update, context: ContextTypes.DEFAULT_TYPE):
    demanda = context.user_data.pop("nova_demanda", None) 
    if demanda:
        context.user_data.setdefault("demandas", []).append(demanda) 

    buttons = [
        [InlineKeyboardButton("‚ûï Adicionar outra demanda", callback_data="add_demanda")],
        [InlineKeyboardButton("‚úÖ Finalizar demandas", callback_data="fim_demandas")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(
            "‚úÖ Demanda adicionada com sucesso! Deseja adicionar outra demanda ou <b>finalizar</b>?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else: 
        await update.message.reply_text(
            "‚úÖ Demanda adicionada com sucesso! Deseja adicionar outra demanda ou <b>finalizar</b>?",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    return DEMANDA_ESCOLHA 


# --- Etapa: Resumo da Ocorr√™ncia ---
async def resumo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message_target = query.message
    elif update.message: 
        message_target = update.message
    else:
        logger.error("A fun√ß√£o 'resumo' foi chamada sem um 'update.message' ou 'update.callback_query' v√°lido.")
        return ConversationHandler.END 

    dados = context.user_data 

    foto_info = dados.get('foto', 'N/A')
    if foto_info != 'N/A' and foto_info != 'Erro no upload':
        foto_display = f"ID no Drive: <code>{foto_info}</code>"
    else:
        foto_display = foto_info

    resumo_texto = (
        f"‚ú® <b>Resumo da Ocorr√™ncia:</b> ‚ú®\n\n"
        f"üë§ <b>Colaborador:</b> {dados.get('colaborador', 'N/A')}\n"
        f"ü§ù <b>Tipo de Visita:</b> {dados.get('tipo_visita', 'N/A')}\n" 
        f"üìû <b>Tipo de Atendimento:</b> {dados.get('tipo_atendimento', 'N/A')}\n"
        f"üìÖ <b>Data:</b> {dados.get('data', 'N/A')}\n" # Move data para cima
        f"üåç <b>Munic√≠pio:</b> {dados.get('municipio', 'N/A')}\n" # Move munic√≠pio para cima
        f"üìå <b>Assunto:</b> {dados.get('assunto', 'N/A')}\n" # Move assunto para cima
        f"üì∑ <b>Foto:</b> {foto_display}\n\n"
        f"üßë‚Äçü§ù‚Äçüè¢ <b>Figuras P√∫blicas e √ìrg√£os Relacionados:</b>\n"
    )

    figuras_orgaos = dados.get("figuras_orgaos", [])
    if figuras_orgaos:
        for i, fo in enumerate(figuras_orgaos, 1):
            resumo_texto += (
                f"<b>{i}. √ìrg√£o:</b> {fo.get('orgao_publico', 'N/A')}\n"
                f"   ‚Ä¢ Figura: {fo.get('figura_publica', 'N/A')}\n"
                f"   ‚Ä¢ Cargo: {fo.get('cargo', 'N/A')}\n"
            )
    else:
        resumo_texto += "<i>Nenhuma figura p√∫blica ou √≥rg√£o relacionado(a) adicionado(a).</i>\n"
    
    resumo_texto += f"\nüìù <b>Demandas Registradas:</b>\n" # Linha de separa√ß√£o

    demandas = dados.get("demandas", [])
    if demandas:
        for i, d in enumerate(demandas, 1):
            resumo_texto += (
                f"<b>{i}. Demanda:</b> {d.get('texto', 'N/A')}\n"
                f"   ‚Ä¢ OV: {d.get('ov', 'N/A')} | PRO: {d.get('pro', 'N/A')}\n"
                f"   ‚Ä¢ Obs: {d.get('observacao', 'N/A')}\n"
            )
    else:
        resumo_texto += "<i>Nenhuma demanda adicional registrada.</i>\n" 

    buttons = [
        [InlineKeyboardButton("‚úÖ Confirmar e Salvar", callback_data="confirmar_salvar")],
        [InlineKeyboardButton("‚ùå Cancelar Tudo", callback_data="cancelar_resumo")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    await message_target.reply_text(
        resumo_texto,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML 
    )

    return CONFIRMACAO_FINAL 


# --- Etapa: Confirma√ß√£o Final de Salvamento ---
async def confirmacao(update, context):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "confirmar_salvar":
        utils.salvar_no_banco(context.user_data) 
        utils.export_data_to_drive()
        utils.salvar_demandas_no_banco(context.user_data, context.user_data.get("demandas", []))
        utils.export_demandas_to_drive(context.user_data.get("demandas", []))
        await query.edit_message_text(
            "üéâ Dados salvos com sucesso no banco de dados e nos arquivos Excel do Google Drive! Muito obrigado pelo seu registro.", 
            parse_mode=ParseMode.HTML
        )
        context.user_data.clear() 
        return ConversationHandler.END 

    elif data == "cancelar_resumo":
        await query.edit_message_text(
            "üö´ Opera√ß√£o cancelada no resumo. Os dados n√£o foram salvos. Use /iniciar para come√ßar novamente.", 
            parse_mode=ParseMode.HTML
        )
        context.user_data.clear() 
        return ConversationHandler.END 
    
# --- Fun√ß√£o de Fallback para Cancelar ---
async def cancelar_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ Opera√ß√£o cancelada. Use /iniciar para reiniciar o registro.")
    context.user_data.clear()
    return ConversationHandler.END

